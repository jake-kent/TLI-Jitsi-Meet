{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///external_api.min.js","webpack:///webpack/bootstrap f44c56c0087feec650d9","webpack:///./modules/API/external/external_api.js","webpack:///./~/jitsi-meet-logger/lib/Logger.js","webpack:///./~/jitsi-meet-logger/lib/index.js","webpack:///./modules/API/constants.js","webpack:///./modules/transport/PostMessageTransportBackend.js","webpack:///./modules/transport/Transport.js","webpack:///./modules/transport/constants.js","webpack:///./modules/transport/index.js","webpack:///./modules/util/helpers.js","webpack:///./react/features/base/config/parseURLParams.js","webpack:///./~/events/events.js","webpack:///./~/jitsi-meet-logger/lib/LogCollector.js","webpack:///./~/postis/src/index.js"],"names":["root","factory","exports","module","define","amd","JitsiMeetExternalAPI","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__filename","_interopRequireDefault","obj","__esModule","default","_objectWithoutProperties","keys","target","i","indexOf","Object","prototype","hasOwnProperty","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","changeParticipantNumber","APIInstance","number","numberOfParticipants","configToURLParamsArray","config","arguments","length","undefined","params","key","push","encodeURIComponent","JSON","stringify","e","console","warn","generateURL","domain","options","configOverwrite","interfaceConfigOverwrite","jwt","noSSL","roomName","url","configURLParams","join","interfaceConfigURLParams","_createClass","defineProperties","props","descriptor","defineProperty","protoProps","staticProps","_events","_events2","_transport","logger","getLogger","commands","avatarUrl","displayName","email","hangup","toggleAudio","toggleChat","toggleContactList","toggleFilmStrip","toggleShareScreen","toggleVideo","events","display-name-change","incoming-message","outgoing-message","participant-joined","participant-left","video-ready-to-close","video-conference-joined","video-conference-left","MIN_HEIGHT","MIN_WIDTH","_EventEmitter","width","height","parentNode","document","body","_this","getPrototypeOf","_createIFrame","Math","max","Transport","backend","PostMessageTransportBackend","postisOptions","scope","window","frame","contentWindow","_setupListeners","iframeHolder","appendChild","createElement","style","frameName","src","name","setAttribute","_this2","on","_ref","data","eventName","emit","event","listener","listeners","addEventListener","dispose","removeAllListeners","removeChild","_len","args","Array","_key","sendEvent","error","commandList","executeCommand","eventList","_this3","forEach","removeEventListener","getCallerInfo","callerInfo","methodName","fileLocation","line","column","Error","stack","split","match","substr","log","level","slice","levels","transports","globalTransports","concat","t","l","bind","apply","Logger","format","methods","trace","debug","info","consoleTransport","addGlobalTransport","transport","removeGlobalTransport","transportIdx","splice","setLevel","TRACE","DEBUG","INFO","LOG","WARN","ERROR","LogCollector","idLoggers","loggers","curLevel","setLogLevelById","setLogLevel","API_ID","_parseURLParams","_parseURLParams2","location","jitsi_meet_external_api_id","_extends","assign","source","_postis","_postis2","DEFAULT_POSTIS_OPTIONS","opener","parent","LEGACY_INCOMING_METHODS","LEGACY_OUTGOING_METHODS","POSTIS_METHOD_NAME","enableLegacyFormat","postis","_enableLegacyFormat","method","listen","_legacyMessageReceivedCallback","_receiveCallback","message","_ref2","send","destroy","_sendLegacyMessage","callback","_toConsumableArray","arr","isArray","arr2","from","_constants","_listeners","Map","_requestID","_responseHandlers","_unprocessedMessages","Set","addListener","setBackend","_backend","type","MESSAGE_TYPE_RESPONSE","handler","get","delete","MESSAGE_TYPE_REQUEST","result","clear","_disposeBackend","listenersForEvent","isProcessed","size","add","set","request","Promise","reject","resolve","setReceiveCallback","_onMessageReceived","MESSAGE_TYPE_EVENT","getJitsiMeetTransport","_Transport2","_PostMessageTransportBackend2","_helpers","_PostMessageTransportBackend","_Transport","getJitsiMeetGlobalNS","setExternalTransportBackend","externalTransportBackend","createDeferred","deferred","promise","debounce","fn","wait","leading","trailing","called","setTimeout","JitsiMeetJS","app","reload","replace","reportError","msg","onerror","parseURLParams","dontParse","paramStr","search","hash","part","param","parse","decodeURIComponent","String","EventEmitter","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","n","isNaN","er","len","err","context","newListener","warned","once","g","removeListener","fired","list","position","ret","listenerCount","evlistener","emitter","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","Postis","readynessCheck","targetWindow","windowForEventListening","sendBuffer","listenBuffer","ready","readyMethod","listenersForMethod","listenBufferForMethod","j","opts","postMessage","clearInterval","readyCheckID","Date","random","setInterval"],"mappings":"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","file":"external_api.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/libs/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(__filename) {'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _events = __webpack_require__(10);\n\t\n\tvar _events2 = _interopRequireDefault(_events);\n\t\n\tvar _transport = __webpack_require__(7);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar logger = __webpack_require__(2).getLogger(__filename);\n\t\n\t/**\n\t * Maps the names of the commands expected by the API with the name of the\n\t * commands expected by jitsi-meet\n\t */\n\tvar commands = {\n\t    avatarUrl: 'avatar-url',\n\t    displayName: 'display-name',\n\t    email: 'email',\n\t    hangup: 'video-hangup',\n\t    toggleAudio: 'toggle-audio',\n\t    toggleChat: 'toggle-chat',\n\t    toggleContactList: 'toggle-contact-list',\n\t    toggleFilmStrip: 'toggle-film-strip',\n\t    toggleShareScreen: 'toggle-share-screen',\n\t    toggleVideo: 'toggle-video'\n\t};\n\t\n\t/**\n\t * Maps the names of the events expected by the API with the name of the\n\t * events expected by jitsi-meet\n\t */\n\tvar events = {\n\t    'display-name-change': 'displayNameChange',\n\t    'incoming-message': 'incomingMessage',\n\t    'outgoing-message': 'outgoingMessage',\n\t    'participant-joined': 'participantJoined',\n\t    'participant-left': 'participantLeft',\n\t    'video-ready-to-close': 'readyToClose',\n\t    'video-conference-joined': 'videoConferenceJoined',\n\t    'video-conference-left': 'videoConferenceLeft'\n\t};\n\t\n\t/**\n\t * Last id of api object\n\t * @type {number}\n\t */\n\tvar id = 0;\n\t\n\t/**\n\t * The minimum height for the Jitsi Meet frame\n\t * @type {number}\n\t */\n\tvar MIN_HEIGHT = 300;\n\t\n\t/**\n\t * The minimum width for the Jitsi Meet frame\n\t * @type {number}\n\t */\n\tvar MIN_WIDTH = 790;\n\t\n\t/**\n\t * Adds given number to the numberOfParticipants property of given APIInstance.\n\t *\n\t * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n\t * @param {int} number - The number of participants to be added to\n\t * numberOfParticipants property (this parameter can be negative number if the\n\t * numberOfParticipants should be decreased).\n\t * @returns {void}\n\t */\n\tfunction changeParticipantNumber(APIInstance, number) {\n\t    APIInstance.numberOfParticipants += number;\n\t}\n\t\n\t/**\n\t * Generates array with URL params based on the passed config object that will\n\t * be used for the Jitsi Meet URL generation.\n\t *\n\t * @param {Object} config - The config object.\n\t * @returns {Array<string>} The array with URL param strings.\n\t */\n\tfunction configToURLParamsArray() {\n\t    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\n\t    var params = [];\n\t\n\t    for (var key in config) {\n\t        // eslint-disable-line guard-for-in\n\t        try {\n\t            params.push(key + '=' + encodeURIComponent(JSON.stringify(config[key])));\n\t        } catch (e) {\n\t            console.warn('Error encoding ' + key + ': ' + e);\n\t        }\n\t    }\n\t\n\t    return params;\n\t}\n\t\n\t/**\n\t * Generates the URL for the iframe.\n\t *\n\t * @param {string} domain - The domain name of the server that hosts the\n\t * conference.\n\t * @param {string} [options] - Another optional parameters.\n\t * @param {Object} [options.configOverwrite] - Object containing configuration\n\t * options defined in config.js to be overridden.\n\t * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n\t * configuration options defined in interface_config.js to be overridden.\n\t * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n\t * authentication.\n\t * @param {boolean} [options.noSsl] - If the value is true https won't be used.\n\t * @param {string} [options.roomName] - The name of the room to join.\n\t * @returns {string} The URL.\n\t */\n\tfunction generateURL(domain) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t    var configOverwrite = options.configOverwrite,\n\t        interfaceConfigOverwrite = options.interfaceConfigOverwrite,\n\t        jwt = options.jwt,\n\t        noSSL = options.noSSL,\n\t        roomName = options.roomName;\n\t\n\t\n\t    var url = (noSSL ? 'http' : 'https') + '://' + domain + '/' + (roomName || '');\n\t\n\t    if (jwt) {\n\t        url += '?jwt=' + jwt;\n\t    }\n\t\n\t    url += '#jitsi_meet_external_api_id=' + id;\n\t\n\t    var configURLParams = configToURLParamsArray(configOverwrite);\n\t\n\t    if (configURLParams.length) {\n\t        url += '&config.' + configURLParams.join('&config.');\n\t    }\n\t\n\t    var interfaceConfigURLParams = configToURLParamsArray(interfaceConfigOverwrite);\n\t\n\t    if (interfaceConfigURLParams.length) {\n\t        url += '&interfaceConfig.' + interfaceConfigURLParams.join('&interfaceConfig.');\n\t    }\n\t\n\t    return url;\n\t}\n\t\n\t/**\n\t * The IFrame API interface class.\n\t */\n\t\n\tvar JitsiMeetExternalAPI = function (_EventEmitter) {\n\t    _inherits(JitsiMeetExternalAPI, _EventEmitter);\n\t\n\t    /**\n\t     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n\t     *\n\t     * @param {string} domain - The domain name of the server that hosts the\n\t     * conference.\n\t     * @param {string} [roomName] - The name of the room to join.\n\t     * @param {number} [width] - Width of the iframe.\n\t     * @param {number} [height] - Height of the iframe.\n\t     * @param {DOMElement} [parentNode] - The node that will contain the\n\t     * iframe.\n\t     * @param {Object} [configOverwrite] - Object containing configuration\n\t     * options defined in config.js to be overridden.\n\t     * @param {Object} [interfaceConfigOverwrite] - Object containing\n\t     * configuration options defined in interface_config.js to be overridden.\n\t     * @param {boolean} [noSSL] - If the value is true https won't be used.\n\t     * @param {string} [jwt] - The JWT token if needed by jitsi-meet for\n\t     * authentication.\n\t     */\n\t    function JitsiMeetExternalAPI(domain) {\n\t        var roomName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\t        var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MIN_WIDTH;\n\t        var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : MIN_HEIGHT;\n\t        var parentNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : document.body;\n\t        var configOverwrite = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\t        var interfaceConfigOverwrite = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\t        var noSSL = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n\t        var jwt = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : undefined;\n\t\n\t        _classCallCheck(this, JitsiMeetExternalAPI);\n\t\n\t        var _this = _possibleConstructorReturn(this, (JitsiMeetExternalAPI.__proto__ || Object.getPrototypeOf(JitsiMeetExternalAPI)).call(this));\n\t\n\t        _this.parentNode = parentNode;\n\t        _this.url = generateURL(domain, {\n\t            configOverwrite: configOverwrite,\n\t            interfaceConfigOverwrite: interfaceConfigOverwrite,\n\t            jwt: jwt,\n\t            noSSL: noSSL,\n\t            roomName: roomName\n\t        });\n\t        _this._createIFrame(Math.max(height, MIN_HEIGHT), Math.max(width, MIN_WIDTH));\n\t        _this._transport = new _transport.Transport({\n\t            backend: new _transport.PostMessageTransportBackend({\n\t                postisOptions: {\n\t                    scope: 'jitsi_meet_external_api_' + id,\n\t                    window: _this.frame.contentWindow\n\t                }\n\t            })\n\t        });\n\t        _this.numberOfParticipants = 1;\n\t        _this._setupListeners();\n\t        id++;\n\t        return _this;\n\t    }\n\t\n\t    /**\n\t     * Creates the iframe element.\n\t     *\n\t     * @param {number} height - The height of the iframe.\n\t     * @param {number} width - The with of the iframe.\n\t     * @returns {void}\n\t     *\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(JitsiMeetExternalAPI, [{\n\t        key: '_createIFrame',\n\t        value: function _createIFrame(height, width) {\n\t            this.iframeHolder = this.parentNode.appendChild(document.createElement('div'));\n\t            this.iframeHolder.id = 'jitsiConference' + id;\n\t            this.iframeHolder.style.width = width + 'px';\n\t            this.iframeHolder.style.height = height + 'px';\n\t\n\t            this.frameName = 'jitsiConferenceFrame' + id;\n\t\n\t            this.frame = document.createElement('iframe');\n\t            this.frame.src = this.url;\n\t            this.frame.name = this.frameName;\n\t            this.frame.id = this.frameName;\n\t            this.frame.width = '100%';\n\t            this.frame.height = '100%';\n\t            this.frame.setAttribute('allowFullScreen', 'true');\n\t            this.frame = this.iframeHolder.appendChild(this.frame);\n\t        }\n\t\n\t        /**\n\t         * Setups listeners that are used internally for JitsiMeetExternalAPI.\n\t         *\n\t         * @returns {void}\n\t         *\n\t         * @private\n\t         */\n\t\n\t    }, {\n\t        key: '_setupListeners',\n\t        value: function _setupListeners() {\n\t            var _this2 = this;\n\t\n\t            this._transport.on('event', function (_ref) {\n\t                var name = _ref.name,\n\t                    data = _objectWithoutProperties(_ref, ['name']);\n\t\n\t                if (name === 'participant-joined') {\n\t                    changeParticipantNumber(_this2, 1);\n\t                } else if (name === 'participant-left') {\n\t                    changeParticipantNumber(_this2, -1);\n\t                }\n\t\n\t                var eventName = events[name];\n\t\n\t                if (eventName) {\n\t                    _this2.emit(eventName, data);\n\t\n\t                    return true;\n\t                }\n\t\n\t                return false;\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Adds event listener to Meet Jitsi.\n\t         *\n\t         * @param {string} event - The name of the event.\n\t         * @param {Function} listener - The listener.\n\t         * @returns {void}\n\t         *\n\t         * @deprecated\n\t         * NOTE: This method is not removed for backward comatability purposes.\n\t         */\n\t\n\t    }, {\n\t        key: 'addEventListener',\n\t        value: function addEventListener(event, listener) {\n\t            this.on(event, listener);\n\t        }\n\t\n\t        /**\n\t         * Adds event listeners to Meet Jitsi.\n\t         *\n\t         * @param {Object} listeners - The object key should be the name of\n\t         * the event and value - the listener.\n\t         * Currently we support the following\n\t         * events:\n\t         * incomingMessage - receives event notifications about incoming\n\t         * messages. The listener will receive object with the following structure:\n\t         * {{\n\t         *  'from': from,//JID of the user that sent the message\n\t         *  'nick': nick,//the nickname of the user that sent the message\n\t         *  'message': txt//the text of the message\n\t         * }}\n\t         * outgoingMessage - receives event notifications about outgoing\n\t         * messages. The listener will receive object with the following structure:\n\t         * {{\n\t         *  'message': txt//the text of the message\n\t         * }}\n\t         * displayNameChanged - receives event notifications about display name\n\t         * change. The listener will receive object with the following structure:\n\t         * {{\n\t         * jid: jid,//the JID of the participant that changed his display name\n\t         * displayname: displayName //the new display name\n\t         * }}\n\t         * participantJoined - receives event notifications about new participant.\n\t         * The listener will receive object with the following structure:\n\t         * {{\n\t         * jid: jid //the jid of the participant\n\t         * }}\n\t         * participantLeft - receives event notifications about the participant that\n\t         * left the room.\n\t         * The listener will receive object with the following structure:\n\t         * {{\n\t         * jid: jid //the jid of the participant\n\t         * }}\n\t         * video-conference-joined - receives event notifications about the local\n\t         * user has successfully joined the video conference.\n\t         * The listener will receive object with the following structure:\n\t         * {{\n\t         * roomName: room //the room name of the conference\n\t         * }}\n\t         * video-conference-left - receives event notifications about the local user\n\t         * has left the video conference.\n\t         * The listener will receive object with the following structure:\n\t         * {{\n\t         * roomName: room //the room name of the conference\n\t         * }}\n\t         * readyToClose - all hangup operations are completed and Jitsi Meet is\n\t         * ready to be disposed.\n\t         * @returns {void}\n\t         *\n\t         * @deprecated\n\t         * NOTE: This method is not removed for backward comatability purposes.\n\t         */\n\t\n\t    }, {\n\t        key: 'addEventListeners',\n\t        value: function addEventListeners(listeners) {\n\t            for (var event in listeners) {\n\t                // eslint-disable-line guard-for-in\n\t                this.addEventListener(event, listeners[event]);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Removes the listeners and removes the Jitsi Meet frame.\n\t         *\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'dispose',\n\t        value: function dispose() {\n\t            this._transport.dispose();\n\t            this.removeAllListeners();\n\t            if (this.iframeHolder) {\n\t                this.iframeHolder.parentNode.removeChild(this.iframeHolder);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Executes command. The available commands are:\n\t         * displayName - sets the display name of the local participant to the value\n\t         * passed in the arguments array.\n\t         * toggleAudio - mutes / unmutes audio with no arguments.\n\t         * toggleVideo - mutes / unmutes video with no arguments.\n\t         * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n\t         * If the command doesn't require any arguments the parameter should be set\n\t         * to empty array or it may be omitted.\n\t         *\n\t         * @param {string} name - The name of the command.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'executeCommand',\n\t        value: function executeCommand(name) {\n\t            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t                args[_key - 1] = arguments[_key];\n\t            }\n\t\n\t            if (!(name in commands)) {\n\t                logger.error('Not supported command name.');\n\t\n\t                return;\n\t            }\n\t            this._transport.sendEvent({\n\t                data: args,\n\t                name: commands[name]\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Executes commands. The available commands are:\n\t         * displayName - sets the display name of the local participant to the value\n\t         * passed in the arguments array.\n\t         * toggleAudio - mutes / unmutes audio. no arguments\n\t         * toggleVideo - mutes / unmutes video. no arguments\n\t         * toggleFilmStrip - hides / shows the filmstrip. no arguments\n\t         * toggleChat - hides / shows chat. no arguments.\n\t         * toggleContactList - hides / shows contact list. no arguments.\n\t         * toggleShareScreen - starts / stops screen sharing. no arguments.\n\t         *\n\t         * @param {Object} commandList - The object with commands to be executed.\n\t         * The keys of the object are the commands that will be executed and the\n\t         * values are the arguments for the command.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'executeCommands',\n\t        value: function executeCommands(commandList) {\n\t            for (var key in commandList) {\n\t                // eslint-disable-line guard-for-in\n\t                this.executeCommand(key, commandList[key]);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Returns the number of participants in the conference. The local\n\t         * participant is included.\n\t         *\n\t         * @returns {int} The number of participants in the conference.\n\t         */\n\t\n\t    }, {\n\t        key: 'getNumberOfParticipants',\n\t        value: function getNumberOfParticipants() {\n\t            return this.numberOfParticipants;\n\t        }\n\t\n\t        /**\n\t         * Removes event listener.\n\t         *\n\t         * @param {string} event - The name of the event.\n\t         * @returns {void}\n\t         *\n\t         * @deprecated\n\t         * NOTE: This method is not removed for backward comatability purposes.\n\t         */\n\t\n\t    }, {\n\t        key: 'removeEventListener',\n\t        value: function removeEventListener(event) {\n\t            this.removeAllListeners(event);\n\t        }\n\t\n\t        /**\n\t         * Removes event listeners.\n\t         *\n\t         * @param {Array<string>} eventList - Array with the names of the events.\n\t         * @returns {void}\n\t         *\n\t         * @deprecated\n\t         * NOTE: This method is not removed for backward comatability purposes.\n\t         */\n\t\n\t    }, {\n\t        key: 'removeEventListeners',\n\t        value: function removeEventListeners(eventList) {\n\t            var _this3 = this;\n\t\n\t            eventList.forEach(function (event) {\n\t                return _this3.removeEventListener(event);\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return JitsiMeetExternalAPI;\n\t}(_events2.default);\n\t\n\tmodule.exports = JitsiMeetExternalAPI;\n\t/* WEBPACK VAR INJECTION */}.call(exports, \"modules/API/external/external_api.js\"))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/* Copyright @ 2015 Atlassian Pty Ltd\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/**\n\t * Ordered log levels.\n\t */\n\tvar levels = {\n\t    \"trace\": 0,\n\t    \"debug\": 1,\n\t    \"info\": 2,\n\t    \"log\": 3,\n\t    \"warn\": 4,\n\t    \"error\": 5\n\t};\n\t\n\t/**\n\t * The default transport - console\n\t * @type LoggerTransport\n\t */\n\tLogger.consoleTransport = console;\n\t\n\t/**\n\t * The array which stores currently registered global transports.\n\t * @type {[LoggerTransport]}\n\t */\n\tvar globalTransports = [ Logger.consoleTransport ];\n\t\n\t/**\n\t * Adds given {@link LoggerTransport} instance to the list of global\n\t * transports which means that it'll be used by all {@link Logger}s\n\t * @param {LoggerTransport} transport\n\t */\n\tLogger.addGlobalTransport = function(transport) {\n\t    if (globalTransports.indexOf(transport) === -1) {\n\t        globalTransports.push(transport);\n\t    }\n\t};\n\t\n\t/**\n\t * Removes given {@link LoggerTransport} instance from the list of global\n\t * transports\n\t * @param {LoggerTransport} transport\n\t */\n\tLogger.removeGlobalTransport = function(transport) {\n\t    var transportIdx = globalTransports.indexOf(transport);\n\t    if (transportIdx !== -1) {\n\t        globalTransports.splice(transportIdx, 1);\n\t    }\n\t};\n\t\n\t/**\n\t * Parses Error's object stack trace and extracts information about the last\n\t * caller before the log method was called.\n\t * @returns JS object with info about the caller - method name, file location,\n\t * line and column.\n\t */\n\tfunction getCallerInfo() {\n\t    var callerInfo = {\n\t        methodName: \"\",\n\t        fileLocation: \"\",\n\t        line: null,\n\t        column: null\n\t    };\n\t    //gets the part of the stack without the logger wrappers\n\t    var error = new Error();\n\t    var stack = error.stack? error.stack.split(\"\\n\") : [];\n\t    if(!stack || stack.length < 1) {\n\t        return callerInfo;\n\t    }\n\t    var m = null;\n\t    if(stack[3]) {\n\t        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n\t    }\n\t    if(!m || m.length <= 4) {\n\t        //Firefox && Safari\n\t        if(stack[2].indexOf(\"log@\") === 0){\n\t            //Safari\n\t            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n\t        } else {\n\t            //Firefox\n\t            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n\t        }\n\t        return callerInfo;\n\t    }\n\t\n\t    callerInfo.methodName = m[1];\n\t    callerInfo.fileLocation = m[2];\n\t    callerInfo.line = m[3];\n\t    callerInfo.column = m[4];\n\t    return callerInfo;\n\t}\n\t\n\t/**\n\t * Logs messages using the transports and level from the logger.\n\t * @param logger a logger instance.\n\t * @param level the log level of the message. See the levels variable.\n\t * @param arguments array with arguments that will be logged.\n\t */\n\tfunction log() {\n\t    var logger = arguments[0], level = arguments[1],\n\t        args = Array.prototype.slice.call(arguments, 2);\n\t    if(levels[level] < logger.level) {\n\t        return;\n\t    }\n\t\n\t    var callerInfo = getCallerInfo();\n\t    var transports = globalTransports.concat(logger.transports);\n\t    for(var i = 0; i < transports.length; i++) {\n\t        var t = transports[i];\n\t        var l = t[level];\n\t        if(l && typeof(l) === \"function\") {\n\t            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n\t                .apply(t, args);\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t *\n\t * Constructs new logger object.\n\t * @param level the logging level for the new logger\n\t * @param id optional identifier for the logger instance.\n\t * @param {LoggerTransport} transports optional list of handlers(objects) for\n\t * the logs. The handlers must support - log, warn, error, debug, info, trace.\n\t * @param format optional (NOT implemented) string.\n\t */\n\tfunction Logger(level, id, transports, format) {\n\t    this.id = id;\n\t    this.format = format;\n\t    this.transports = transports;\n\t    if(!this.transports) {\n\t        this.transports = [];\n\t    }\n\t    this.level = levels[level];\n\t    var methods = Object.keys(levels);\n\t    for(var i = 0; i < methods.length; i++){\n\t        this[methods[i]] =\n\t            log.bind(null, this, methods[i]);\n\t    }\n\t}\n\t\n\t/**\n\t * Sets the log level for the logger.\n\t * @param level the new log level.\n\t */\n\tLogger.prototype.setLevel = function (level) {\n\t    this.level = levels[level];\n\t};\n\tmodule.exports = Logger;\n\t\n\t/**\n\t * Enum for the supported log levels.\n\t */\n\tLogger.levels = {\n\t    TRACE: \"trace\",\n\t    DEBUG: \"debug\",\n\t    INFO: \"info\",\n\t    LOG: \"log\",\n\t    WARN: \"warn\",\n\t    ERROR: \"error\"\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* Copyright @ 2015 Atlassian Pty Ltd\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\tvar Logger = __webpack_require__(1);\n\tvar LogCollector = __webpack_require__(11);\n\t\n\t/**\n\t * Definition of the log method\n\t * @name log_method\n\t * @function\n\t * @param {...*} log_args the arguments to be logged\n\t */\n\t/**\n\t * The logger's transport type definition.\n\t *\n\t * @typedef {object} LoggerTransport\n\t *\n\t * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n\t * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n\t * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n\t * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n\t * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n\t * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n\t */\n\t\n\t/**\n\t * Map with the created loggers with ID.\n\t */\n\tvar idLoggers = {};\n\t\n\t/**\n\t * Array with the loggers without id.\n\t */\n\tvar loggers = [];\n\t\n\t/**\n\t * Log level for the lbrary.\n\t */\n\tvar curLevel = Logger.levels.TRACE;\n\t\n\t\n\tmodule.exports = {\n\t    /**\n\t     * Adds given {@link LoggerTransport} instance to the list of global\n\t     * transports which means that it'll be used by all {@link Logger}s\n\t     * @param {LoggerTransport} transport\n\t     */\n\t    addGlobalTransport: function(transport) {\n\t        Logger.addGlobalTransport(transport);\n\t    },\n\t    /**\n\t     * Removes given {@link LoggerTransport} instance from the list of global\n\t     * transports\n\t     * @param {LoggerTransport} transport\n\t     */\n\t    removeGlobalTransport: function(transport) {\n\t        Logger.removeGlobalTransport(transport);\n\t    },\n\t    /**\n\t     * Creates new logger.\n\t     * @arguments the same as Logger constructor\n\t     */\n\t    getLogger: function(id, transports, format) {\n\t        var logger = new Logger(curLevel, id, transports, format);\n\t        if(id) {\n\t            idLoggers[id] = idLoggers[id] || [];\n\t            idLoggers[id].push(logger);\n\t        } else {\n\t            loggers.push(logger);\n\t        }\n\t        return logger;\n\t    },\n\t    /**\n\t     * Changes the log level for the existing loggers by id.\n\t     * @param level the new log level.\n\t     * @param id if specified the level will be changed only for loggers with the\n\t     * same id. Otherwise the operation will affect all loggers that don't\n\t     * have id.\n\t     */\n\t    setLogLevelById: function(level, id) {\n\t        var l = id? (idLoggers[id] || []) : loggers;\n\t        for(var i = 0; i < l.length; i++) {\n\t            l[i].setLevel(level);\n\t        }\n\t    },\n\t    /**\n\t     * Changes the log level for all existing loggers.\n\t     * @param level the new log level.\n\t     */\n\t    setLogLevel: function (level) {\n\t        curLevel = level;\n\t        var i = 0;\n\t        for(; i < loggers.length; i++) {\n\t            loggers[i].setLevel(level);\n\t        }\n\t\n\t        for(var id in idLoggers) {\n\t            var l = idLoggers[id] || [];\n\t            for(i = 0; i < l.length; i++) {\n\t                l[i].setLevel(level);\n\t            }\n\t        }\n\t    },\n\t    /**\n\t     * The supported log levels.\n\t     */\n\t    levels: Logger.levels,\n\t    /**\n\t     * Exports the <tt>LogCollector</tt>.\n\t     */\n\t    LogCollector: LogCollector\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.API_ID = undefined;\n\t\n\tvar _parseURLParams = __webpack_require__(9);\n\t\n\tvar _parseURLParams2 = _interopRequireDefault(_parseURLParams);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * JitsiMeetExternalAPI id - unique for a webpage.\n\t */\n\tvar API_ID = exports.API_ID = (0, _parseURLParams2.default)(window.location).jitsi_meet_external_api_id; // XXX The function parseURLParams is exported by the feature base/config (as\n\t// defined in the terminology of react/). However, this file is (very likely)\n\t// bundled in external_api in addition to app.bundle and, consequently, it is\n\t// best to import as little as possible here (rather than the whole feature\n\t// base/config) in order to minimize the amount of source code bundled into\n\t// multiple bundles.\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _postis = __webpack_require__(12);\n\t\n\tvar _postis2 = _interopRequireDefault(_postis);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * The default options for postis.\n\t *\n\t * @type {Object}\n\t */\n\tvar DEFAULT_POSTIS_OPTIONS = {\n\t    window: window.opener || window.parent\n\t};\n\t\n\t/**\n\t * The list of methods of incoming postis messages that we have to support for\n\t * backward compatibility for the users that are directly sending messages to\n\t * Jitsi Meet (without using external_api.js)\n\t *\n\t * @type {string[]}\n\t */\n\tvar LEGACY_INCOMING_METHODS = ['avatar-url', 'display-name', 'email', 'toggle-audio', 'toggle-chat', 'toggle-contact-list', 'toggle-film-strip', 'toggle-share-screen', 'toggle-video', 'video-hangup'];\n\t\n\t/**\n\t * The list of methods of outgoing postis messages that we have to support for\n\t * backward compatibility for the users that are directly listening to the\n\t * postis messages send by Jitsi Meet(without using external_api.js).\n\t *\n\t * @type {string[]}\n\t */\n\tvar LEGACY_OUTGOING_METHODS = ['display-name-change', 'incoming-message', 'outgoing-message', 'participant-joined', 'participant-left', 'video-conference-joined', 'video-conference-left', 'video-ready-to-close'];\n\t\n\t/**\n\t * The postis method used for all messages.\n\t *\n\t * @type {string}\n\t */\n\tvar POSTIS_METHOD_NAME = 'message';\n\t\n\t/**\n\t * Implements message transport using the postMessage API.\n\t */\n\t\n\tvar PostMessageTransportBackend = function () {\n\t    /**\n\t     * Creates new PostMessageTransportBackend instance.\n\t     *\n\t     * @param {Object} options - Optional parameters for configuration of the\n\t     * transport.\n\t     */\n\t    function PostMessageTransportBackend() {\n\t        var _this = this;\n\t\n\t        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t            enableLegacyFormat = _ref.enableLegacyFormat,\n\t            postisOptions = _ref.postisOptions;\n\t\n\t        _classCallCheck(this, PostMessageTransportBackend);\n\t\n\t        this.postis = (0, _postis2.default)(_extends({}, DEFAULT_POSTIS_OPTIONS, postisOptions));\n\t\n\t        /**\n\t         * If true PostMessageTransportBackend will process and send messages\n\t         * using the legacy format and in the same time the current format.\n\t         * Otherwise all messages (outgoing and incoming) that are using the\n\t         * legacy format will be ignored.\n\t         *\n\t         * @type {boolean}\n\t         */\n\t        this._enableLegacyFormat = enableLegacyFormat;\n\t\n\t        if (this._enableLegacyFormat) {\n\t            // backward compatibility\n\t            LEGACY_INCOMING_METHODS.forEach(function (method) {\n\t                return _this.postis.listen(method, function (params) {\n\t                    return _this._legacyMessageReceivedCallback(method, params);\n\t                });\n\t            });\n\t        }\n\t\n\t        this._receiveCallback = function () {\n\t            // Do nothing until a callback is set by the consumer of\n\t            // PostMessageTransportBackend via setReceiveCallback.\n\t        };\n\t\n\t        this.postis.listen(POSTIS_METHOD_NAME, function (message) {\n\t            return _this._receiveCallback(message);\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Handles incoming legacy postis messages.\n\t     *\n\t     * @param {string} method - The method property from the postis message.\n\t     * @param {Any} params - The params property from the postis message.\n\t     * @returns {void}\n\t     */\n\t\n\t\n\t    _createClass(PostMessageTransportBackend, [{\n\t        key: '_legacyMessageReceivedCallback',\n\t        value: function _legacyMessageReceivedCallback(method) {\n\t            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t            this._receiveCallback({\n\t                data: {\n\t                    name: method,\n\t                    data: params\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Sends the passed message via postis using the old format.\n\t         *\n\t         * @param {Object} legacyMessage - The message to be sent.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: '_sendLegacyMessage',\n\t        value: function _sendLegacyMessage(_ref2) {\n\t            var name = _ref2.name,\n\t                data = _objectWithoutProperties(_ref2, ['name']);\n\t\n\t            if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n\t                this.postis.send({\n\t                    method: name,\n\t                    params: data\n\t                });\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Disposes the allocated resources.\n\t         *\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'dispose',\n\t        value: function dispose() {\n\t            this.postis.destroy();\n\t        }\n\t\n\t        /**\n\t         * Sends the passed message.\n\t         *\n\t         * @param {Object} message - The message to be sent.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'send',\n\t        value: function send(message) {\n\t            this.postis.send({\n\t                method: POSTIS_METHOD_NAME,\n\t                params: message\n\t            });\n\t\n\t            if (this._enableLegacyFormat) {\n\t                // For the legacy use case we don't need any new fields defined in\n\t                // Transport class. That's why we are passing only the original\n\t                // object passed by the consumer of the Transport class which is\n\t                // message.data.\n\t                this._sendLegacyMessage(message.data);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Sets the callback for receiving data.\n\t         *\n\t         * @param {Function} callback - The new callback.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'setReceiveCallback',\n\t        value: function setReceiveCallback(callback) {\n\t            this._receiveCallback = callback;\n\t        }\n\t    }]);\n\t\n\t    return PostMessageTransportBackend;\n\t}();\n\t\n\texports.default = PostMessageTransportBackend;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _constants = __webpack_require__(6);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Stores the currnet transport backend that have to be used. Also implements\n\t * request/response mechanism.\n\t */\n\tvar Transport = function () {\n\t    /**\n\t     * Creates new instance.\n\t     *\n\t     * @param {Object} options - Optional parameters for configuration of the\n\t     * transport backend.\n\t     */\n\t    function Transport() {\n\t        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t            backend = _ref.backend;\n\t\n\t        _classCallCheck(this, Transport);\n\t\n\t        /**\n\t         * Maps an event name and listener that have been added to the Transport\n\t         * instance.\n\t         *\n\t         * @type {Map<string, Function>}\n\t         */\n\t        this._listeners = new Map();\n\t\n\t        /**\n\t         * The request ID counter used for the id property of the request. This\n\t         * property is used to match the responses with the request.\n\t         *\n\t         * @type {number}\n\t         */\n\t        this._requestID = 0;\n\t\n\t        /**\n\t         * Maps an IDs of the requests and handlers that will process the\n\t         * responses of those requests.\n\t         *\n\t         * @type {Map<number, Function>}\n\t         */\n\t        this._responseHandlers = new Map();\n\t\n\t        /**\n\t         * A set with the events and requests that were received but not\n\t         * processed by any listener. They are later passed on every new\n\t         * listener until they are processed.\n\t         *\n\t         * @type {Set<Object>}\n\t         */\n\t        this._unprocessedMessages = new Set();\n\t\n\t        /**\n\t         * Alias.\n\t         */\n\t        this.addListener = this.on;\n\t\n\t        if (backend) {\n\t            this.setBackend(backend);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Disposes the current transport backend.\n\t     *\n\t     * @returns {void}\n\t     */\n\t\n\t\n\t    _createClass(Transport, [{\n\t        key: '_disposeBackend',\n\t        value: function _disposeBackend() {\n\t            if (this._backend) {\n\t                this._backend.dispose();\n\t                this._backend = null;\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Handles incoming messages from the transport backend.\n\t         *\n\t         * @param {Object} message - The message.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: '_onMessageReceived',\n\t        value: function _onMessageReceived(message) {\n\t            var _this = this;\n\t\n\t            if (message.type === _constants.MESSAGE_TYPE_RESPONSE) {\n\t                var handler = this._responseHandlers.get(message.id);\n\t\n\t                if (handler) {\n\t                    handler(message);\n\t                    this._responseHandlers.delete(message.id);\n\t                }\n\t            } else if (message.type === _constants.MESSAGE_TYPE_REQUEST) {\n\t                this.emit('request', message.data, function (result, error) {\n\t                    _this._backend.send({\n\t                        type: _constants.MESSAGE_TYPE_RESPONSE,\n\t                        error: error,\n\t                        id: message.id,\n\t                        result: result\n\t                    });\n\t                });\n\t            } else {\n\t                this.emit('event', message.data);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Disposes the allocated resources.\n\t         *\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'dispose',\n\t        value: function dispose() {\n\t            this._responseHandlers.clear();\n\t            this._unprocessedMessages.clear();\n\t            this.removeAllListeners();\n\t            this._disposeBackend();\n\t        }\n\t\n\t        /**\n\t         * Calls each of the listeners registered for the event named eventName, in\n\t         * the order they were registered, passing the supplied arguments to each.\n\t         *\n\t         * @param {string} eventName -  The name of the event.\n\t         * @returns {boolean} True if the event has been processed by any listener,\n\t         * false otherwise.\n\t         */\n\t\n\t    }, {\n\t        key: 'emit',\n\t        value: function emit(eventName) {\n\t            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t                args[_key - 1] = arguments[_key];\n\t            }\n\t\n\t            var listenersForEvent = this._listeners.get(eventName);\n\t            var isProcessed = false;\n\t\n\t            if (listenersForEvent && listenersForEvent.size) {\n\t                listenersForEvent.forEach(function (listener) {\n\t                    isProcessed = listener.apply(undefined, args) || isProcessed;\n\t                });\n\t            }\n\t\n\t            if (!isProcessed) {\n\t                this._unprocessedMessages.add(args);\n\t            }\n\t\n\t            return isProcessed;\n\t        }\n\t\n\t        /**\n\t         * Adds the listener function to the listeners collection for the event\n\t         * named eventName.\n\t         *\n\t         * @param {string} eventName -  The name of the event.\n\t         * @param {Function} listener - The listener that will be added.\n\t         * @returns {Transport} References to the instance of Transport class, so\n\t         * that calls can be chained.\n\t         */\n\t\n\t    }, {\n\t        key: 'on',\n\t        value: function on(eventName, listener) {\n\t            var _this2 = this;\n\t\n\t            var listenersForEvent = this._listeners.get(eventName);\n\t\n\t            if (!listenersForEvent) {\n\t                listenersForEvent = new Set();\n\t                this._listeners.set(eventName, listenersForEvent);\n\t            }\n\t\n\t            listenersForEvent.add(listener);\n\t\n\t            this._unprocessedMessages.forEach(function (args) {\n\t                if (listener.apply(undefined, _toConsumableArray(args))) {\n\t                    _this2._unprocessedMessages.delete(args);\n\t                }\n\t            });\n\t\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Removes all listeners, or those of the specified eventName.\n\t         *\n\t         * @param {string} [eventName] - The name of the event. If this parameter is\n\t         * not specified all listeners will be removed.\n\t         * @returns {Transport} References to the instance of Transport class, so\n\t         * that calls can be chained.\n\t         */\n\t\n\t    }, {\n\t        key: 'removeAllListeners',\n\t        value: function removeAllListeners(eventName) {\n\t            if (eventName) {\n\t                this._listeners.delete(eventName);\n\t            } else {\n\t                this._listeners.clear();\n\t            }\n\t\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Removes the listener function from the listeners collection for the event\n\t         * named eventName.\n\t         *\n\t         * @param {string} eventName -  The name of the event.\n\t         * @param {Function} listener - The listener that will be removed.\n\t         * @returns {Transport} References to the instance of Transport class, so\n\t         * that calls can be chained.\n\t         */\n\t\n\t    }, {\n\t        key: 'removeListener',\n\t        value: function removeListener(eventName, listener) {\n\t            var listenersForEvent = this._listeners.get(eventName);\n\t\n\t            if (listenersForEvent) {\n\t                listenersForEvent.delete(listener);\n\t            }\n\t\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Sends the passed event.\n\t         *\n\t         * @param {Object} event - The event to be sent.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'sendEvent',\n\t        value: function sendEvent() {\n\t            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\n\t            if (this._backend) {\n\t                this._backend.send({\n\t                    type: _constants.MESSAGE_TYPE_EVENT,\n\t                    data: event\n\t                });\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Sending request.\n\t         *\n\t         * @param {Object} request - The request to be sent.\n\t         * @returns {Promise}\n\t         */\n\t\n\t    }, {\n\t        key: 'sendRequest',\n\t        value: function sendRequest(request) {\n\t            var _this3 = this;\n\t\n\t            if (!this._backend) {\n\t                return Promise.reject(new Error('No transport backend defined!'));\n\t            }\n\t\n\t            this._requestID++;\n\t\n\t            var id = this._requestID;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                _this3._responseHandlers.set(id, function (_ref2) {\n\t                    var error = _ref2.error,\n\t                        result = _ref2.result;\n\t\n\t                    if (result) {\n\t                        resolve(result);\n\t                    } else if (error) {\n\t                        reject(error);\n\t                    } else {\n\t                        // no response\n\t                        reject(new Error('Unexpected response format!'));\n\t                    }\n\t                });\n\t\n\t                _this3._backend.send({\n\t                    type: _constants.MESSAGE_TYPE_REQUEST,\n\t                    data: request,\n\t                    id: id\n\t                });\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Changes the current backend transport.\n\t         *\n\t         * @param {Object} backend - The new transport backend that will be used.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'setBackend',\n\t        value: function setBackend(backend) {\n\t            this._disposeBackend();\n\t\n\t            this._backend = backend;\n\t            this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n\t        }\n\t    }]);\n\t\n\t    return Transport;\n\t}();\n\t\n\texports.default = Transport;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * The message type for events.\n\t *\n\t * @type {string}\n\t */\n\tvar MESSAGE_TYPE_EVENT = exports.MESSAGE_TYPE_EVENT = 'event';\n\t\n\t/**\n\t * The message type for requests.\n\t *\n\t * @type {string}\n\t */\n\tvar MESSAGE_TYPE_REQUEST = exports.MESSAGE_TYPE_REQUEST = 'request';\n\t\n\t/**\n\t * The message type for responses.\n\t *\n\t * @type {string}\n\t */\n\tvar MESSAGE_TYPE_RESPONSE = exports.MESSAGE_TYPE_RESPONSE = 'response';\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Transport = exports.PostMessageTransportBackend = undefined;\n\texports.getJitsiMeetTransport = getJitsiMeetTransport;\n\t\n\tvar _constants = __webpack_require__(3);\n\t\n\tvar _helpers = __webpack_require__(8);\n\t\n\tvar _PostMessageTransportBackend = __webpack_require__(4);\n\t\n\tvar _PostMessageTransportBackend2 = _interopRequireDefault(_PostMessageTransportBackend);\n\t\n\tvar _Transport = __webpack_require__(5);\n\t\n\tvar _Transport2 = _interopRequireDefault(_Transport);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// FIXME: change to '../API' when we update to webpack2. If we do this now all\n\t// files from API modules will be included in external_api.js.\n\texports.PostMessageTransportBackend = _PostMessageTransportBackend2.default;\n\texports.Transport = _Transport2.default;\n\t\n\t/**\n\t * Option for the default low level transport.\n\t *\n\t * @type {Object}\n\t */\n\t\n\tvar postisOptions = {};\n\t\n\tif (typeof _constants.API_ID === 'number') {\n\t    postisOptions.scope = 'jitsi_meet_external_api_' + _constants.API_ID;\n\t}\n\t\n\t/**\n\t * The instance of Transport class that will be used by Jitsi Meet.\n\t *\n\t * @type {Transport}\n\t */\n\tvar transport = void 0;\n\t\n\t/**\n\t * Returns the instance of Transport class that will be used by Jitsi Meet.\n\t *\n\t * @returns {Transport}\n\t */\n\tfunction getJitsiMeetTransport() {\n\t    if (!transport) {\n\t        transport = new _Transport2.default({\n\t            backend: new _PostMessageTransportBackend2.default({\n\t                enableLegacyFormat: true,\n\t                postisOptions: postisOptions\n\t            })\n\t        });\n\t    }\n\t\n\t    return transport;\n\t}\n\t\n\t/**\n\t * Sets the transport to passed transport.\n\t *\n\t * @param {Object} externalTransportBackend - The new transport.\n\t * @returns {void}\n\t */\n\t(0, _helpers.getJitsiMeetGlobalNS)().setExternalTransportBackend = function (externalTransportBackend) {\n\t    return transport.setBackend(externalTransportBackend);\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(__filename) {\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.createDeferred = createDeferred;\n\texports.debounce = debounce;\n\texports.getJitsiMeetGlobalNS = getJitsiMeetGlobalNS;\n\texports.reload = reload;\n\texports.replace = replace;\n\texports.reportError = reportError;\n\tvar logger = __webpack_require__(2).getLogger(__filename);\n\t\n\t/**\n\t * Create deferred object.\n\t *\n\t * @returns {{promise, resolve, reject}}\n\t */\n\tfunction createDeferred() {\n\t    var deferred = {};\n\t\n\t    deferred.promise = new Promise(function (resolve, reject) {\n\t        deferred.resolve = resolve;\n\t        deferred.reject = reject;\n\t    });\n\t\n\t    return deferred;\n\t}\n\t\n\t/**\n\t * Creates a debounced function that delays invoking func until after wait\n\t * milliseconds have elapsed since the last time the debounced function was\n\t * invoked.\n\t *\n\t * @param fn\n\t * @param wait\n\t * @param options\n\t * @returns {function(...[*])}\n\t */\n\tfunction debounce(fn) {\n\t    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t\n\t    var leading = options.leading || false;\n\t    var trailing = typeof options.trailing === 'undefined' || options.trailing;\n\t    var called = false;\n\t\n\t    return function () {\n\t        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t            args[_key] = arguments[_key];\n\t        }\n\t\n\t        if (!called) {\n\t            leading && fn.apply(undefined, args);\n\t\n\t            setTimeout(function () {\n\t                called = false;\n\t                trailing && fn.apply(undefined, args);\n\t            }, wait);\n\t\n\t            called = true;\n\t        }\n\t    };\n\t}\n\t\n\t/**\n\t * Returns the namespace for all global variables, functions, etc that we need.\n\t *\n\t * @returns {Object} the namespace.\n\t *\n\t * NOTE: After React-ifying everything this should be the only global.\n\t */\n\tfunction getJitsiMeetGlobalNS() {\n\t    if (!window.JitsiMeetJS) {\n\t        window.JitsiMeetJS = {};\n\t    }\n\t    if (!window.JitsiMeetJS.app) {\n\t        window.JitsiMeetJS.app = {};\n\t    }\n\t    return window.JitsiMeetJS.app;\n\t}\n\t\n\t/**\n\t * Reload page.\n\t */\n\tfunction reload() {\n\t    window.location.reload();\n\t}\n\t\n\t/**\n\t * Redirects to a specific new URL by replacing the current location (in the\n\t * history).\n\t *\n\t * @param {string} url the URL pointing to the location where the user should\n\t * be redirected to.\n\t */\n\tfunction replace(url) {\n\t    window.location.replace(url);\n\t}\n\t\n\t/**\n\t * Prints the error and reports it to the global error handler.\n\t *\n\t * @param e {Error} the error\n\t * @param msg {string} [optional] the message printed in addition to the error\n\t */\n\tfunction reportError(e) {\n\t    var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\t\n\t    logger.error(msg, e);\n\t    window.onerror && window.onerror(msg, null, null, null, e);\n\t}\n\t/* WEBPACK VAR INJECTION */}.call(exports, \"modules/util/helpers.js\"))\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = parseURLParams;\n\t\n\t\n\t/**\n\t * Parses the parameters from the URL and returns them as a JS object.\n\t *\n\t * @param {string} url - URL to parse.\n\t * @param {boolean} dontParse - If false or undefined some transformations\n\t * (for parsing the value as JSON) are going to be executed.\n\t * @param {string} source - Values - \"hash\"/\"search\" if \"search\" the parameters\n\t * will parsed from location.search otherwise from location.hash.\n\t * @returns {Object}\n\t */\n\tfunction parseURLParams(url) {\n\t    var dontParse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\t    var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'hash';\n\t\n\t    var paramStr = source === 'search' ? url.search : url.hash;\n\t    var params = {};\n\t\n\t    // eslint-disable-next-line newline-per-chained-call\n\t    paramStr && paramStr.substr(1).split('&').forEach(function (part) {\n\t        var param = part.split('=');\n\t        var key = param[0];\n\t\n\t        if (!key) {\n\t            return;\n\t        }\n\t\n\t        var value = void 0;\n\t\n\t        try {\n\t            value = param[1];\n\t            if (!dontParse) {\n\t                value = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n\t            }\n\t        } catch (e) {\n\t            var msg = 'Failed to parse URL parameter value: ' + String(value);\n\t\n\t            console.warn(msg, e);\n\t            window.onerror && window.onerror(msg, null, null, null, e);\n\t\n\t            return;\n\t        }\n\t        params[key] = value;\n\t    });\n\t\n\t    return params;\n\t}\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tfunction EventEmitter() {\n\t  this._events = this._events || {};\n\t  this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\t\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\t\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\t\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\t\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t  if (!isNumber(n) || n < 0 || isNaN(n))\n\t    throw TypeError('n must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.emit = function(type) {\n\t  var er, handler, len, args, i, listeners;\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events.error ||\n\t        (isObject(this._events.error) && !this._events.error.length)) {\n\t      er = arguments[1];\n\t      if (er instanceof Error) {\n\t        throw er; // Unhandled 'error' event\n\t      } else {\n\t        // At least give some kind of context to the user\n\t        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n\t        err.context = er;\n\t        throw err;\n\t      }\n\t    }\n\t  }\n\t\n\t  handler = this._events[type];\n\t\n\t  if (isUndefined(handler))\n\t    return false;\n\t\n\t  if (isFunction(handler)) {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t  } else if (isObject(handler)) {\n\t    args = Array.prototype.slice.call(arguments, 1);\n\t    listeners = handler.slice();\n\t    len = listeners.length;\n\t    for (i = 0; i < len; i++)\n\t      listeners[i].apply(this, args);\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  var m;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // To avoid recursion in the case that type === \"newListener\"! Before\n\t  // adding it to the listeners, first emit \"newListener\".\n\t  if (this._events.newListener)\n\t    this.emit('newListener', type,\n\t              isFunction(listener.listener) ?\n\t              listener.listener : listener);\n\t\n\t  if (!this._events[type])\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  else if (isObject(this._events[type]))\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  else\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\t\n\t  // Check for listener leak\n\t  if (isObject(this._events[type]) && !this._events[type].warned) {\n\t    if (!isUndefined(this._maxListeners)) {\n\t      m = this._maxListeners;\n\t    } else {\n\t      m = EventEmitter.defaultMaxListeners;\n\t    }\n\t\n\t    if (m && m > 0 && this._events[type].length > m) {\n\t      this._events[type].warned = true;\n\t      console.error('(node) warning: possible EventEmitter memory ' +\n\t                    'leak detected. %d listeners added. ' +\n\t                    'Use emitter.setMaxListeners() to increase limit.',\n\t                    this._events[type].length);\n\t      if (typeof console.trace === 'function') {\n\t        // not supported in IE 10\n\t        console.trace();\n\t      }\n\t    }\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\t\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  var fired = false;\n\t\n\t  function g() {\n\t    this.removeListener(type, g);\n\t\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  g.listener = listener;\n\t  this.on(type, g);\n\t\n\t  return this;\n\t};\n\t\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  var list, position, length, i;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events || !this._events[type])\n\t    return this;\n\t\n\t  list = this._events[type];\n\t  length = list.length;\n\t  position = -1;\n\t\n\t  if (list === listener ||\n\t      (isFunction(list.listener) && list.listener === listener)) {\n\t    delete this._events[type];\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t\n\t  } else if (isObject(list)) {\n\t    for (i = length; i-- > 0;) {\n\t      if (list[i] === listener ||\n\t          (list[i].listener && list[i].listener === listener)) {\n\t        position = i;\n\t        break;\n\t      }\n\t    }\n\t\n\t    if (position < 0)\n\t      return this;\n\t\n\t    if (list.length === 1) {\n\t      list.length = 0;\n\t      delete this._events[type];\n\t    } else {\n\t      list.splice(position, 1);\n\t    }\n\t\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  var key, listeners;\n\t\n\t  if (!this._events)\n\t    return this;\n\t\n\t  // not listening for removeListener, no need to emit\n\t  if (!this._events.removeListener) {\n\t    if (arguments.length === 0)\n\t      this._events = {};\n\t    else if (this._events[type])\n\t      delete this._events[type];\n\t    return this;\n\t  }\n\t\n\t  // emit removeListener for all listeners on all events\n\t  if (arguments.length === 0) {\n\t    for (key in this._events) {\n\t      if (key === 'removeListener') continue;\n\t      this.removeAllListeners(key);\n\t    }\n\t    this.removeAllListeners('removeListener');\n\t    this._events = {};\n\t    return this;\n\t  }\n\t\n\t  listeners = this._events[type];\n\t\n\t  if (isFunction(listeners)) {\n\t    this.removeListener(type, listeners);\n\t  } else if (listeners) {\n\t    // LIFO order\n\t    while (listeners.length)\n\t      this.removeListener(type, listeners[listeners.length - 1]);\n\t  }\n\t  delete this._events[type];\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.listeners = function(type) {\n\t  var ret;\n\t  if (!this._events || !this._events[type])\n\t    ret = [];\n\t  else if (isFunction(this._events[type]))\n\t    ret = [this._events[type]];\n\t  else\n\t    ret = this._events[type].slice();\n\t  return ret;\n\t};\n\t\n\tEventEmitter.prototype.listenerCount = function(type) {\n\t  if (this._events) {\n\t    var evlistener = this._events[type];\n\t\n\t    if (isFunction(evlistener))\n\t      return 1;\n\t    else if (evlistener)\n\t      return evlistener.length;\n\t  }\n\t  return 0;\n\t};\n\t\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t  return emitter.listenerCount(type);\n\t};\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* Copyright @ 2016 Atlassian Pty Ltd\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\tvar Logger = __webpack_require__(1);\n\t\n\t/**\n\t * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n\t * and thus can be added as global transport in order to capture all the logs.\n\t *\n\t * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n\t * a message and stores them in a queue in order to batch log entries. There are\n\t * time and size limit constraints which determine how often batch entries are\n\t * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n\t * will use the <tt>logStorage</tt> object given as an argument to save\n\t * the batch log entry.\n\t *\n\t * @param {Object} logStorage an object which allows to store the logs collected\n\t * @param {function(string|object[])} logStorage.storeLogs a method called when\n\t * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n\t * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n\t * item is an object it means that it's an aggregated message. That is a message\n\t * which is the same as the previous one and it's representation has\n\t * the following format:\n\t * {\n\t *   {string} text: 'the text of some duplicated message'\n\t *   {number} count: 3 // how many times the message appeared in a row\n\t * }\n\t * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n\t * the sequence of \"A\". Which means that even if the next message \"C\" is\n\t * the same as \"A\" it will start a new aggregated message \"C\".\n\t * @param {function()} logStorage.isReady a method which should return\n\t * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n\t * time storage is not ready log batches will be cached and stored on the next\n\t * occasion (flush or interval timeout).\n\t *\n\t * @param {Object} options the <tt>LogCollector</tt> configuration options.\n\t * @param {number} options.maxEntryLength the size limit for a single log entry\n\t * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n\t * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n\t * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n\t * storage becomes ready. Note that the \"is ready\" condition is checked every\n\t * <tt>options.storeInterval</tt> milliseconds.\n\t * @param {number} options.storeInterval how often the logs should be stored in\n\t * case <tt>maxEntryLength</tt> was not exceeded.\n\t * @param {boolean} options.stringifyObjects indicates whether or not object\n\t * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n\t * message is composed. Note that objects logged on the error log level are\n\t * always stringified.\n\t *\n\t * @constructor\n\t */\n\tfunction LogCollector(logStorage, options) {\n\t    this.logStorage = logStorage;\n\t    this.stringifyObjects\n\t        = options && options.stringifyObjects\n\t            ? options.stringifyObjects : false;\n\t    this.storeInterval\n\t        = options && options.storeInterval\n\t            ? options.storeInterval: 30000;\n\t    this.maxEntryLength\n\t        = options && options.maxEntryLength\n\t            ? options.maxEntryLength : 10000;\n\t    // Bind the log method for each level to the corresponding method name\n\t    // in order to implement \"global log transport\" object.\n\t    Object.keys(Logger.levels).forEach(\n\t    function (logLevel) {\n\t        var methodName = Logger.levels[logLevel];\n\t        this[methodName] = function (logLevel) {\n\t            this._log.apply(this, arguments);\n\t        }.bind(this, logLevel);\n\t    }.bind(this));\n\t    /**\n\t     * The ID of store logs interval if one is currently scheduled or\n\t     * <tt>null</tt> otherwise.\n\t     * @type {number|null}\n\t     */\n\t    this.storeLogsIntervalID = null;\n\t    /**\n\t     * The log messages that are to be batched into log entry when\n\t     * {@link LogCollector._flush} method is called.\n\t     * @type {string[]}\n\t     */\n\t    this.queue = [];\n\t    /**\n\t     * The total length of all messages currently stored in the {@link queue}.\n\t     * @type {number}\n\t     */\n\t    this.totalLen = 0;\n\t    /**\n\t     * An array used to temporarily store log batches, before the storage gets\n\t     * ready.\n\t     * @type {string[]}\n\t     */\n\t    this.outputCache = [];\n\t}\n\t\n\t/**\n\t * Method called inside of {@link formatLogMessage} in order to covert an\n\t * <tt>Object</tt> argument to string. The conversion will happen when either\n\t * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n\t * log level. The default implementation uses <tt>JSON.stringify</tt> and\n\t * returns \"[object with circular refs?]\" instead of an object if it fails.\n\t *\n\t * @param {object} someObject the <tt>object</tt> to be stringified.\n\t *\n\t * @return {string} the result of <tt>JSON.stringify</tt> or\n\t * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n\t *\n\t * @protected\n\t */\n\tLogCollector.prototype.stringify = function (someObject) {\n\t    try {\n\t        return JSON.stringify(someObject);\n\t    } catch (error) {\n\t        return \"[object with circular refs?]\";\n\t    }\n\t};\n\t\n\t/**\n\t * Formats log entry for the given logging level and arguments passed to the\n\t * <tt>Logger</tt>'s log method. The first argument is log level and the next\n\t * arguments have to be captured using JS built-in 'arguments' variable.\n\t *\n\t * @param {Logger.levels} logLevel provides the logging level of the message to\n\t * be logged.\n\t *\n\t * @return {string|null} a non-empty string representation of the log entry\n\t * crafted from the log arguments. If the return value is <tt>null</tt> then\n\t * the message wil be discarded by this <tt>LogCollector</tt>.\n\t *\n\t * @protected\n\t */\n\tLogCollector.prototype.formatLogMessage\n\t= function (logLevel/*, arg1, arg2, arg3... */) {\n\t    var msg = '';\n\t    for (var i = 1, len = arguments.length; i < len; i++) {\n\t        var arg = arguments[i];\n\t        // objects logged on error level are always converted to JSON\n\t        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n\t            && typeof arg === 'object') {\n\t            arg = this.stringify(arg);\n\t        }\n\t        msg += arg;\n\t        if (i != len - 1) {\n\t            msg += ' ';\n\t        }\n\t    }\n\t    return msg.length ? msg : null;\n\t};\n\t\n\t/**\n\t * The log method bound to each of the logging levels in order to implement\n\t * \"global log transport\" object.\n\t *\n\t * @private\n\t */\n\tLogCollector.prototype._log = function() {\n\t\n\t    // var logLevel = arguments[0]; first argument is the log level\n\t    var msg = this.formatLogMessage.apply(this, arguments);\n\t    if (msg) {\n\t        // The same as the previous message aggregation logic\n\t        var prevMessage\n\t            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n\t        // NOTE that typeof undefined is 'undefined'\n\t        var prevMessageText\n\t            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n\t        // Is it the same as the previous one ?\n\t        if (prevMessageText == msg) {\n\t            if (typeof prevMessage === 'object') {\n\t                prevMessage.count += 1;\n\t            } else {\n\t                this.queue[this.queue.length-1] = {\n\t                    text: msg,\n\t                    count: 2\n\t                }\n\t            }\n\t        } else {\n\t            this.queue.push(msg);\n\t            this.totalLen += msg.length;\n\t        }\n\t    }\n\t\n\t    if (this.totalLen >= this.maxEntryLength) {\n\t        this._flush(true /* force */, true /* reschedule */);\n\t    }\n\t};\n\t\n\t/**\n\t * Starts periodical \"store logs\" task which will be triggered at the interval\n\t * specified in the constructor options.\n\t */\n\tLogCollector.prototype.start = function () {\n\t    this._reschedulePublishInterval();\n\t};\n\t\n\t/**\n\t * Reschedules the periodical \"store logs\" task which will store the next batch\n\t * log entry in the storage.\n\t * @private\n\t */\n\tLogCollector.prototype._reschedulePublishInterval = function () {\n\t    if (this.storeLogsIntervalID) {\n\t        window.clearTimeout(this.storeLogsIntervalID);\n\t        this.storeLogsIntervalID = null;\n\t    }\n\t    // It's actually a timeout, because it is rescheduled on every flush\n\t    this.storeLogsIntervalID\n\t        = window.setTimeout(\n\t            this._flush.bind(\n\t                this, false /* do not force */, true /* reschedule */),\n\t            this.storeInterval);\n\t};\n\t\n\t/**\n\t * Call this method to flush the log entry buffer and store it in the log\n\t * storage immediately (given that the storage is ready).\n\t */\n\tLogCollector.prototype.flush = function() {\n\t    this._flush(\n\t        false /* do not force, as it will not be stored anyway */,\n\t        true /* reschedule next update */ )\n\t};\n\t\n\t/**\n\t * Stores the next batch log entry in the log storage.\n\t * @param {boolean} force enforce current logs batch to be stored or cached if\n\t * there is anything to be logged, but the storage is not ready yet. One of\n\t * legitimate reasons to force is when the logs length exceeds size limit which\n\t * could result in truncation.\n\t * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n\t * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n\t * task cycle.\n\t * @private\n\t */\n\tLogCollector.prototype._flush = function(force, reschedule) {\n\t    // Publish only if there's anything to be logged\n\t    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n\t        //FIXME avoid truncating\n\t        // right now we don't care if the message size is \"slightly\" exceeded\n\t        if (this.logStorage.isReady()) {\n\t            // Sends all cached logs\n\t            if (this.outputCache.length) {\n\t                this.outputCache.forEach(\n\t                    function (cachedQueue) {\n\t                        this.logStorage.storeLogs(cachedQueue);\n\t                    }.bind(this)\n\t                );\n\t                // Clear the cache\n\t                this.outputCache = [];\n\t            }\n\t            // Send current batch\n\t            this.logStorage.storeLogs(this.queue);\n\t        } else {\n\t            this.outputCache.push(this.queue);\n\t        }\n\t\n\t        this.queue = [];\n\t        this.totalLen = 0;\n\t    }\n\t\n\t    if (reschedule) {\n\t        this._reschedulePublishInterval();\n\t    }\n\t};\n\t\n\t/**\n\t * Stops the periodical \"store logs\" task and immediately stores any pending\n\t * log entries as a batch.\n\t */\n\tLogCollector.prototype.stop = function() {\n\t    // Flush and stop publishing logs\n\t    this._flush(false /* do not force */, false /* do not reschedule */);\n\t};\n\t\n\tmodule.exports = LogCollector;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tfunction Postis(options) {\n\t  var scope = options.scope;\n\t  var targetWindow = options.window;\n\t  var windowForEventListening = options.windowForEventListening || window;\n\t  var listeners = {};\n\t  var sendBuffer = [];\n\t  var listenBuffer = {};\n\t  var ready = false;\n\t  var readyMethod = \"__ready__\";\n\t  var readynessCheck;\n\t\n\t  var listener = function(event) {\n\t    var data;\n\t    try {\n\t      data = JSON.parse(event.data);\n\t    } catch (e) {\n\t      return;\n\t    }\n\t\n\t    if (data.postis && data.scope === scope) {\n\t      var listenersForMethod = listeners[data.method];\n\t      if (listenersForMethod) {\n\t        for (var i = 0; i < listenersForMethod.length; i++) {\n\t          listenersForMethod[i].call(null, data.params);\n\t        }\n\t      } else {\n\t        listenBuffer[data.method] = listenBuffer[data.method] || [];\n\t        listenBuffer[data.method].push(data.params);\n\t      }\n\t    }\n\t  };\n\t\n\t  windowForEventListening.addEventListener(\"message\", listener, false);\n\t\n\t  var postis = {\n\t    listen: function (method, callback) {\n\t      listeners[method] = listeners[method] || [];\n\t      listeners[method].push(callback);\n\t\n\t      var listenBufferForMethod = listenBuffer[method];\n\t      if (listenBufferForMethod) {\n\t        var listenersForMethod = listeners[method];\n\t        for (var i = 0; i < listenersForMethod.length; i++) {\n\t          for (var j = 0; j < listenBufferForMethod.length; j++) {\n\t            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n\t          }\n\t        }\n\t      }\n\t      delete listenBuffer[method];\n\t    },\n\t\n\t    send: function (opts) {\n\t      var method = opts.method;\n\t\n\t      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n\t        targetWindow.postMessage(JSON.stringify({\n\t          postis: true,\n\t          scope: scope,\n\t          method: method,\n\t          params: opts.params\n\t        }), \"*\");\n\t      } else {\n\t        sendBuffer.push(opts);\n\t      }\n\t    },\n\t\n\t    ready: function (callback) {\n\t      if (ready) {\n\t        callback();\n\t      } else {\n\t        setTimeout(function () { postis.ready(callback); }, 50);\n\t      }\n\t    },\n\t\n\t    destroy: function (callback) {\n\t      clearInterval(readynessCheck);\n\t      ready = false;\n\t      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n\t        windowForEventListening.removeEventListener(\"message\", listener);\n\t      }\n\t      callback && callback();\n\t    }\n\t  };\n\t\n\t  var readyCheckID = +new Date() + Math.random() + \"\";\n\t\n\t  readynessCheck = setInterval(function () {\n\t    postis.send({\n\t      method: readyMethod,\n\t      params: readyCheckID\n\t    });\n\t  }, 50);\n\t\n\t  postis.listen(readyMethod, function (id) {\n\t    if (id === readyCheckID) {\n\t      clearInterval(readynessCheck);\n\t      ready = true;\n\t\n\t      for (var i = 0; i < sendBuffer.length; i++) {\n\t        postis.send(sendBuffer[i]);\n\t      }\n\t      sendBuffer = [];\n\t    } else {\n\t      postis.send({\n\t        method: readyMethod,\n\t        params: id\n\t      });\n\t    }\n\t  });\n\t\n\t  return postis;\n\t}\n\t\n\tmodule.exports = Postis;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// external_api.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f44c56c0087feec650d9","import EventEmitter from 'events';\n\nimport {\n    PostMessageTransportBackend,\n    Transport\n} from '../../transport';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nconst commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleContactList: 'toggle-contact-list',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nconst events = {\n    'display-name-change': 'displayNameChange',\n    'incoming-message': 'incomingMessage',\n    'outgoing-message': 'outgoingMessage',\n    'participant-joined': 'participantJoined',\n    'participant-left': 'participantLeft',\n    'video-ready-to-close': 'readyToClose',\n    'video-conference-joined': 'videoConferenceJoined',\n    'video-conference-left': 'videoConferenceLeft'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nlet id = 0;\n\n/**\n * The minimum height for the Jitsi Meet frame\n * @type {number}\n */\nconst MIN_HEIGHT = 300;\n\n/**\n * The minimum width for the Jitsi Meet frame\n * @type {number}\n */\nconst MIN_WIDTH = 790;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance.numberOfParticipants += number;\n}\n\n/**\n * Generates array with URL params based on the passed config object that will\n * be used for the Jitsi Meet URL generation.\n *\n * @param {Object} config - The config object.\n * @returns {Array<string>} The array with URL param strings.\n */\nfunction configToURLParamsArray(config = {}) {\n    const params = [];\n\n    for (const key in config) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(config[key]))}`);\n        } catch (e) {\n            console.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSsl] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain, options = {}) {\n    const {\n        configOverwrite,\n        interfaceConfigOverwrite,\n        jwt,\n        noSSL,\n        roomName\n    } = options;\n\n    let url = `${noSSL ? 'http' : 'https'}://${domain}/${roomName || ''}`;\n\n    if (jwt) {\n        url += `?jwt=${jwt}`;\n    }\n\n    url += `#jitsi_meet_external_api_id=${id}`;\n\n    const configURLParams = configToURLParamsArray(configOverwrite);\n\n    if (configURLParams.length) {\n        url += `&config.${configURLParams.join('&config.')}`;\n    }\n\n    const interfaceConfigURLParams\n        = configToURLParamsArray(interfaceConfigOverwrite);\n\n    if (interfaceConfigURLParams.length) {\n        url += `&interfaceConfig.${\n            interfaceConfigURLParams.join('&interfaceConfig.')}`;\n    }\n\n    return url;\n}\n\n/**\n * The IFrame API interface class.\n */\nclass JitsiMeetExternalAPI extends EventEmitter {\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {string} [roomName] - The name of the room to join.\n     * @param {number} [width] - Width of the iframe.\n     * @param {number} [height] - Height of the iframe.\n     * @param {DOMElement} [parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [configOverwrite] - Object containing configuration\n     * options defined in config.js to be overridden.\n     * @param {Object} [interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [noSSL] - If the value is true https won't be used.\n     * @param {string} [jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     */\n    constructor(domain, // eslint-disable-line max-params\n        roomName = '',\n        width = MIN_WIDTH,\n        height = MIN_HEIGHT,\n        parentNode = document.body,\n        configOverwrite = {},\n        interfaceConfigOverwrite = {},\n        noSSL = false,\n        jwt = undefined) {\n        super();\n        this.parentNode = parentNode;\n        this.url = generateURL(domain, {\n            configOverwrite,\n            interfaceConfigOverwrite,\n            jwt,\n            noSSL,\n            roomName\n        });\n        this._createIFrame(Math.max(height, MIN_HEIGHT),\n            Math.max(width, MIN_WIDTH));\n        this._transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                postisOptions: {\n                    scope: `jitsi_meet_external_api_${id}`,\n                    window: this.frame.contentWindow\n                }\n            })\n        });\n        this.numberOfParticipants = 1;\n        this._setupListeners();\n        id++;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number} height - The height of the iframe.\n     * @param {number} width - The with of the iframe.\n     * @returns {void}\n     *\n     * @private\n     */\n    _createIFrame(height, width) {\n        this.iframeHolder\n            = this.parentNode.appendChild(document.createElement('div'));\n        this.iframeHolder.id = `jitsiConference${id}`;\n        this.iframeHolder.style.width = `${width}px`;\n        this.iframeHolder.style.height = `${height}px`;\n\n        this.frameName = `jitsiConferenceFrame${id}`;\n\n        this.frame = document.createElement('iframe');\n        this.frame.src = this.url;\n        this.frame.name = this.frameName;\n        this.frame.id = this.frameName;\n        this.frame.width = '100%';\n        this.frame.height = '100%';\n        this.frame.setAttribute('allowFullScreen', 'true');\n        this.frame = this.iframeHolder.appendChild(this.frame);\n    }\n\n    /**\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\n     *\n     * @returns {void}\n     *\n     * @private\n     */\n    _setupListeners() {\n\n        this._transport.on('event', ({ name, ...data }) => {\n            if (name === 'participant-joined') {\n                changeParticipantNumber(this, 1);\n            } else if (name === 'participant-left') {\n                changeParticipantNumber(this, -1);\n            }\n\n            const eventName = events[name];\n\n            if (eventName) {\n                this.emit(eventName, data);\n\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Adds event listener to Meet Jitsi.\n     *\n     * @param {string} event - The name of the event.\n     * @param {Function} listener - The listener.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListener(event, listener) {\n        this.on(event, listener);\n    }\n\n    /**\n     * Adds event listeners to Meet Jitsi.\n     *\n     * @param {Object} listeners - The object key should be the name of\n     * the event and value - the listener.\n     * Currently we support the following\n     * events:\n     * incomingMessage - receives event notifications about incoming\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'from': from,//JID of the user that sent the message\n     *  'nick': nick,//the nickname of the user that sent the message\n     *  'message': txt//the text of the message\n     * }}\n     * outgoingMessage - receives event notifications about outgoing\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'message': txt//the text of the message\n     * }}\n     * displayNameChanged - receives event notifications about display name\n     * change. The listener will receive object with the following structure:\n     * {{\n     * jid: jid,//the JID of the participant that changed his display name\n     * displayname: displayName //the new display name\n     * }}\n     * participantJoined - receives event notifications about new participant.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * participantLeft - receives event notifications about the participant that\n     * left the room.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * video-conference-joined - receives event notifications about the local\n     * user has successfully joined the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * video-conference-left - receives event notifications about the local user\n     * has left the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * readyToClose - all hangup operations are completed and Jitsi Meet is\n     * ready to be disposed.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListeners(listeners) {\n        for (const event in listeners) { // eslint-disable-line guard-for-in\n            this.addEventListener(event, listeners[event]);\n        }\n    }\n\n    /**\n     * Removes the listeners and removes the Jitsi Meet frame.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._transport.dispose();\n        this.removeAllListeners();\n        if (this.iframeHolder) {\n            this.iframeHolder.parentNode.removeChild(this.iframeHolder);\n        }\n    }\n\n    /**\n     * Executes command. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio with no arguments.\n     * toggleVideo - mutes / unmutes video with no arguments.\n     * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n     * If the command doesn't require any arguments the parameter should be set\n     * to empty array or it may be omitted.\n     *\n     * @param {string} name - The name of the command.\n     * @returns {void}\n     */\n    executeCommand(name, ...args) {\n        if (!(name in commands)) {\n            logger.error('Not supported command name.');\n\n            return;\n        }\n        this._transport.sendEvent({\n            data: args,\n            name: commands[name]\n        });\n    }\n\n    /**\n     * Executes commands. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio. no arguments\n     * toggleVideo - mutes / unmutes video. no arguments\n     * toggleFilmStrip - hides / shows the filmstrip. no arguments\n     * toggleChat - hides / shows chat. no arguments.\n     * toggleContactList - hides / shows contact list. no arguments.\n     * toggleShareScreen - starts / stops screen sharing. no arguments.\n     *\n     * @param {Object} commandList - The object with commands to be executed.\n     * The keys of the object are the commands that will be executed and the\n     * values are the arguments for the command.\n     * @returns {void}\n     */\n    executeCommands(commandList) {\n        for (const key in commandList) { // eslint-disable-line guard-for-in\n            this.executeCommand(key, commandList[key]);\n        }\n    }\n\n    /**\n     * Returns the number of participants in the conference. The local\n     * participant is included.\n     *\n     * @returns {int} The number of participants in the conference.\n     */\n    getNumberOfParticipants() {\n        return this.numberOfParticipants;\n    }\n\n    /**\n     * Removes event listener.\n     *\n     * @param {string} event - The name of the event.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListener(event) {\n        this.removeAllListeners(event);\n    }\n\n    /**\n     * Removes event listeners.\n     *\n     * @param {Array<string>} eventList - Array with the names of the events.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListeners(eventList) {\n        eventList.forEach(event => this.removeEventListener(event));\n    }\n}\n\nmodule.exports = JitsiMeetExternalAPI;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/external_api.js","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/Logger.js\n// module id = 1\n// module chunks = 0","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/index.js\n// module id = 2\n// module chunks = 0","// XXX The function parseURLParams is exported by the feature base/config (as\n// defined in the terminology of react/). However, this file is (very likely)\n// bundled in external_api in addition to app.bundle and, consequently, it is\n// best to import as little as possible here (rather than the whole feature\n// base/config) in order to minimize the amount of source code bundled into\n// multiple bundles.\nimport parseURLParams from '../../react/features/base/config/parseURLParams';\n\n/**\n * JitsiMeetExternalAPI id - unique for a webpage.\n */\nexport const API_ID\n    = parseURLParams(window.location).jitsi_meet_external_api_id;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/constants.js","import Postis from 'postis';\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nconst DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The list of methods of incoming postis messages that we have to support for\n * backward compatibility for the users that are directly sending messages to\n * Jitsi Meet (without using external_api.js)\n *\n * @type {string[]}\n */\nconst LEGACY_INCOMING_METHODS = [\n    'avatar-url',\n    'display-name',\n    'email',\n    'toggle-audio',\n    'toggle-chat',\n    'toggle-contact-list',\n    'toggle-film-strip',\n    'toggle-share-screen',\n    'toggle-video',\n    'video-hangup'\n];\n\n/**\n * The list of methods of outgoing postis messages that we have to support for\n * backward compatibility for the users that are directly listening to the\n * postis messages send by Jitsi Meet(without using external_api.js).\n *\n * @type {string[]}\n */\nconst LEGACY_OUTGOING_METHODS = [\n    'display-name-change',\n    'incoming-message',\n    'outgoing-message',\n    'participant-joined',\n    'participant-left',\n    'video-conference-joined',\n    'video-conference-left',\n    'video-ready-to-close'\n];\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nconst POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\nexport default class PostMessageTransportBackend {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    constructor({ enableLegacyFormat, postisOptions } = {}) {\n        this.postis = Postis({\n            ...DEFAULT_POSTIS_OPTIONS,\n            ...postisOptions\n        });\n\n        /**\n         * If true PostMessageTransportBackend will process and send messages\n         * using the legacy format and in the same time the current format.\n         * Otherwise all messages (outgoing and incoming) that are using the\n         * legacy format will be ignored.\n         *\n         * @type {boolean}\n         */\n        this._enableLegacyFormat = enableLegacyFormat;\n\n        if (this._enableLegacyFormat) {\n            // backward compatibility\n            LEGACY_INCOMING_METHODS.forEach(method =>\n                this.postis.listen(\n                    method,\n                    params =>\n                        this._legacyMessageReceivedCallback(method, params)\n                )\n            );\n        }\n\n        this._receiveCallback = () => {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(\n            POSTIS_METHOD_NAME,\n            message => this._receiveCallback(message));\n    }\n\n    /**\n     * Handles incoming legacy postis messages.\n     *\n     * @param {string} method - The method property from the postis message.\n     * @param {Any} params - The params property from the postis message.\n     * @returns {void}\n     */\n    _legacyMessageReceivedCallback(method, params = {}) {\n        this._receiveCallback({\n            data: {\n                name: method,\n                data: params\n            }\n        });\n    }\n\n    /**\n     * Sends the passed message via postis using the old format.\n     *\n     * @param {Object} legacyMessage - The message to be sent.\n     * @returns {void}\n     */\n    _sendLegacyMessage({ name, ...data }) {\n        if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n            this.postis.send({\n                method: name,\n                params: data\n            });\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this.postis.destroy();\n    }\n\n    /**\n     * Sends the passed message.\n     *\n     * @param {Object} message - The message to be sent.\n     * @returns {void}\n     */\n    send(message) {\n        this.postis.send({\n            method: POSTIS_METHOD_NAME,\n            params: message\n        });\n\n        if (this._enableLegacyFormat) {\n            // For the legacy use case we don't need any new fields defined in\n            // Transport class. That's why we are passing only the original\n            // object passed by the consumer of the Transport class which is\n            // message.data.\n            this._sendLegacyMessage(message.data);\n        }\n    }\n\n    /**\n     * Sets the callback for receiving data.\n     *\n     * @param {Function} callback - The new callback.\n     * @returns {void}\n     */\n    setReceiveCallback(callback) {\n        this._receiveCallback = callback;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/PostMessageTransportBackend.js","import {\n    MESSAGE_TYPE_EVENT,\n    MESSAGE_TYPE_REQUEST,\n    MESSAGE_TYPE_RESPONSE\n} from './constants';\n\n/**\n * Stores the currnet transport backend that have to be used. Also implements\n * request/response mechanism.\n */\nexport default class Transport {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    constructor({ backend } = {}) {\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n    _disposeBackend() {\n        if (this._backend) {\n            this._backend.dispose();\n            this._backend = null;\n        }\n    }\n\n    /**\n     * Handles incoming messages from the transport backend.\n     *\n     * @param {Object} message - The message.\n     * @returns {void}\n     */\n    _onMessageReceived(message) {\n        if (message.type === MESSAGE_TYPE_RESPONSE) {\n            const handler = this._responseHandlers.get(message.id);\n\n            if (handler) {\n                handler(message);\n                this._responseHandlers.delete(message.id);\n            }\n        } else if (message.type === MESSAGE_TYPE_REQUEST) {\n            this.emit('request', message.data, (result, error) => {\n                this._backend.send({\n                    type: MESSAGE_TYPE_RESPONSE,\n                    error,\n                    id: message.id,\n                    result\n                });\n            });\n        } else {\n            this.emit('event', message.data);\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._responseHandlers.clear();\n        this._unprocessedMessages.clear();\n        this.removeAllListeners();\n        this._disposeBackend();\n    }\n\n    /**\n     * Calls each of the listeners registered for the event named eventName, in\n     * the order they were registered, passing the supplied arguments to each.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @returns {boolean} True if the event has been processed by any listener,\n     * false otherwise.\n     */\n    emit(eventName, ...args) {\n        const listenersForEvent = this._listeners.get(eventName);\n        let isProcessed = false;\n\n        if (listenersForEvent && listenersForEvent.size) {\n            listenersForEvent.forEach(listener => {\n                isProcessed = listener(...args) || isProcessed;\n            });\n        }\n\n        if (!isProcessed) {\n            this._unprocessedMessages.add(args);\n        }\n\n        return isProcessed;\n    }\n\n    /**\n     * Adds the listener function to the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be added.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    on(eventName, listener) {\n        let listenersForEvent = this._listeners.get(eventName);\n\n        if (!listenersForEvent) {\n            listenersForEvent = new Set();\n            this._listeners.set(eventName, listenersForEvent);\n        }\n\n        listenersForEvent.add(listener);\n\n        this._unprocessedMessages.forEach(args => {\n            if (listener(...args)) {\n                this._unprocessedMessages.delete(args);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @param {string} [eventName] - The name of the event. If this parameter is\n     * not specified all listeners will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this._listeners.delete(eventName);\n        } else {\n            this._listeners.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the listener function from the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeListener(eventName, listener) {\n        const listenersForEvent = this._listeners.get(eventName);\n\n        if (listenersForEvent) {\n            listenersForEvent.delete(listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends the passed event.\n     *\n     * @param {Object} event - The event to be sent.\n     * @returns {void}\n     */\n    sendEvent(event = {}) {\n        if (this._backend) {\n            this._backend.send({\n                type: MESSAGE_TYPE_EVENT,\n                data: event\n            });\n        }\n    }\n\n    /**\n     * Sending request.\n     *\n     * @param {Object} request - The request to be sent.\n     * @returns {Promise}\n     */\n    sendRequest(request) {\n        if (!this._backend) {\n            return Promise.reject(new Error('No transport backend defined!'));\n        }\n\n        this._requestID++;\n\n        const id = this._requestID;\n\n        return new Promise((resolve, reject) => {\n            this._responseHandlers.set(id, ({ error, result }) => {\n                if (result) {\n                    resolve(result);\n                } else if (error) {\n                    reject(error);\n                } else { // no response\n                    reject(new Error('Unexpected response format!'));\n                }\n            });\n\n            this._backend.send({\n                type: MESSAGE_TYPE_REQUEST,\n                data: request,\n                id\n            });\n        });\n    }\n\n    /**\n     * Changes the current backend transport.\n     *\n     * @param {Object} backend - The new transport backend that will be used.\n     * @returns {void}\n     */\n    setBackend(backend) {\n        this._disposeBackend();\n\n        this._backend = backend;\n        this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/Transport.js","/**\n * The message type for events.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_RESPONSE = 'response';\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/constants.js","// FIXME: change to '../API' when we update to webpack2. If we do this now all\n// files from API modules will be included in external_api.js.\nimport { API_ID } from '../API/constants';\nimport { getJitsiMeetGlobalNS } from '../util/helpers';\n\nimport PostMessageTransportBackend from './PostMessageTransportBackend';\nimport Transport from './Transport';\n\nexport {\n    PostMessageTransportBackend,\n    Transport\n};\n\n/**\n * Option for the default low level transport.\n *\n * @type {Object}\n */\nconst postisOptions = {};\n\nif (typeof API_ID === 'number') {\n    postisOptions.scope = `jitsi_meet_external_api_${API_ID}`;\n}\n\n/**\n * The instance of Transport class that will be used by Jitsi Meet.\n *\n * @type {Transport}\n */\nlet transport;\n\n/**\n * Returns the instance of Transport class that will be used by Jitsi Meet.\n *\n * @returns {Transport}\n */\nexport function getJitsiMeetTransport() {\n    if (!transport) {\n        transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                enableLegacyFormat: true,\n                postisOptions\n            })\n        });\n    }\n\n    return transport;\n}\n\n/**\n * Sets the transport to passed transport.\n *\n * @param {Object} externalTransportBackend - The new transport.\n * @returns {void}\n */\ngetJitsiMeetGlobalNS().setExternalTransportBackend = externalTransportBackend =>\n    transport.setBackend(externalTransportBackend);\n\n\n\n// WEBPACK FOOTER //\n// ./modules/transport/index.js","const logger = require(\"jitsi-meet-logger\").getLogger(__filename);\n\n/**\n * Create deferred object.\n *\n * @returns {{promise, resolve, reject}}\n */\nexport function createDeferred() {\n    const deferred = {};\n\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n\n    return deferred;\n}\n\n/**\n * Creates a debounced function that delays invoking func until after wait\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * @param fn\n * @param wait\n * @param options\n * @returns {function(...[*])}\n */\nexport function debounce(fn, wait = 0, options = {}) {\n    const leading = options.leading || false;\n    const trailing\n        = (typeof options.trailing === 'undefined') || options.trailing;\n    let called = false;\n\n    return (...args) => {\n        if (!called) {\n            leading && fn(...args);\n\n            setTimeout(() => {\n                called = false;\n                trailing && fn(...args);\n            }, wait);\n\n            called = true;\n        }\n    };\n}\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} the namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * Reload page.\n */\nexport function reload() {\n    window.location.reload();\n}\n\n/**\n * Redirects to a specific new URL by replacing the current location (in the\n * history).\n *\n * @param {string} url the URL pointing to the location where the user should\n * be redirected to.\n */\nexport function replace(url) {\n    window.location.replace(url);\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param e {Error} the error\n * @param msg {string} [optional] the message printed in addition to the error\n */\nexport function reportError(e, msg = \"\") {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./modules/util/helpers.js","/* @flow */\n\n/**\n * Parses the parameters from the URL and returns them as a JS object.\n *\n * @param {string} url - URL to parse.\n * @param {boolean} dontParse - If false or undefined some transformations\n * (for parsing the value as JSON) are going to be executed.\n * @param {string} source - Values - \"hash\"/\"search\" if \"search\" the parameters\n * will parsed from location.search otherwise from location.hash.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value\n                    = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            const msg = `Failed to parse URL parameter value: ${String(value)}`;\n\n            console.warn(msg, e);\n            window.onerror && window.onerror(msg, null, null, null, e);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./react/features/base/config/parseURLParams.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/events/events.js\n// module id = 10\n// module chunks = 0","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/LogCollector.js\n// module id = 11\n// module chunks = 0","function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/postis/src/index.js\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}